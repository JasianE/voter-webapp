name: Tests CI
on: [push, pull_request]
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Test using Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "14.16.0"
      - run: yarn install --ignore-scripts
      - run: yarn run lint
  tests:
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres?schema=public
      TEST_DATASOURCE_URL: postgres://postgres:postgres@localhost:5433/postgres?schema=public
      SESSION_SECRET: test-secret
      PORT: 3000
      DOMAIN: http://localhost:3000
    services:
      db:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v2
      - name: Test using Node.js
        uses: actions/setup-node@v1
        with:
          node-version: "14.16.0"
      - name: Install Chrome
        run: |
          apt-get install -y wget gnupg
          && wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
          && sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list'
          && apt-get install -y google-chrome-stable fonts-ipafont-gothic fonts-wqy-zenhei fonts-thai-tlwg fonts-kacst fonts-freefont-ttf libxss1
            --no-install-recommends
      - run: yarn install --ignore-scripts
      - run: npm rebuild node-sass
      - run: yarn compile
      - run: NODE_ENV=production yarn start & yarn test
      - name: Tests âœ…
        if: ${{ success() }}
        run: |
          curl --request POST --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' --header 'content-type: application/json' --data '{
            "context": "tests",
            "state": "success",
            "description": "Tests passed",
            "target_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }'
      - name: Tests ðŸš¨
        if: ${{ failure() }}
        run: |
          curl --request POST --url https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.sha }} --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' --header 'content-type: application/json' --data '{
            "context": "tests",
            "state": "failure",
            "description": "Tests failed",
            "target_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          }'
